{"ast":null,"code":"var _jsxFileName = \"/Users/dannylee/git/ttp-live/ttp-live-frontend/src/components/RightCol.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios'; // facilitate comma-separated numbers, eg: 8,888\n\nvar commaNumber = require('comma-number');\n\nconst HEADERS = {\n  \"content-type\": \"application/json\",\n  \"accept\": \"application/json\"\n};\n\nclass RightCol extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        ticker,\n        quantity\n      } = this.state; // check for completed form inputs\n\n      if (!ticker) {\n        alert(\"Please enter a valid stock ticker symbol.\");\n        return;\n      } // positive, integers only\n\n\n      if (!quantity || !Number.isInteger(Number(quantity)) || quantity < 0) {\n        alert(\"Please enter quantity of shares\");\n        return;\n      }\n\n      axios.get(`https://sandbox.iexapis.com/stable/stock/${ticker}/quote?token=Tpk_f60d00f3b3774527b14ddc2510d54b18`).then(response => {\n        if (response.data.symbol) {\n          let orderCost = (response.data.latestPrice * quantity).toFixed(2);\n          let newBalance = this.props.user.cash - orderCost; // make sure User has enough cash to cover purchase\n\n          if (newBalance > 0) {\n            // Had these two lines reversed, so state was getting reset before the order was sent out\n            this.placeOrder(this.props.user.id, newBalance, ticker, quantity, response.data.latestPrice);\n            this.setState({\n              ticker: '',\n              quantity: ''\n            });\n          } else {\n            alert(\"Insufficient funds\");\n            return;\n          }\n        } else {\n          this.setState({\n            errors: 'no such ticker',\n            ticker: '',\n            quantity: ''\n          });\n        }\n      }).catch(error => {\n        console.log('api errors:', error); // clear state in the case we have an invalid ticker symbol\n\n        this.setState({\n          ticker: '',\n          quantity: ''\n        });\n        alert('Please enter a valid stock ticker symbol');\n      });\n    };\n\n    this.state = {\n      ticker: '',\n      quantity: ''\n    };\n  }\n\n  placeOrder(userID, newBalance, ticker, quantity, latestPrice) {\n    // create our new stock instance and assign it current user\n    fetch(`https://ttp-live-backend.herokuapp.com/stocks`, {\n      method: \"POST\",\n      headers: HEADERS,\n      body: JSON.stringify({\n        symbol: ticker.toUpperCase(),\n        shares: quantity,\n        price: latestPrice,\n        user_id: userID\n      })\n    }).then(resp => resp.json()).then(json => {\n      // update our current user's cash balance\n      fetch(`https://ttp-live-backend.herokuapp.com/users/${userID}`, {\n        method: \"PATCH\",\n        headers: HEADERS,\n        body: JSON.stringify({\n          cash: newBalance\n        })\n      }).then(resp => resp.json()).then(json => {\n        this.props.updateUser(json.user);\n      }); // update our stocks array in App.js state\n      // this.props.updateStocks(json.stock, latestPrice)\n      // instead get the stocks from the server API\n\n      this.props.getUserStocks(userID);\n    });\n  }\n\n  render() {\n    // console.log(this.props)\n    const {\n      ticker,\n      quantity\n    } = this.state;\n    return (\n      /*#__PURE__*/\n      // Portfolio mode, show right column bg color and dividing line\n      React.createElement(\"div\", {\n        className: `column ${this.props.modeStatus === 'portfolio' && this.props.loading ? 'right fade-out' : this.props.modeStatus === 'portfolio' ? 'right' : ''}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 7\n        }\n      }, this.props.modeStatus === 'portfolio' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cash-balance\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }, \"Cash Balance: $ \", this.props.userobj ? `${commaNumber(parseFloat(this.props.userobj.cash).toFixed(2))}` : null), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        className: \"w3-container stock-form\",\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        placeholder: \"Ticker symbol\",\n        className: \"w3-input w3-border w3-light-grey\",\n        type: \"text\",\n        name: \"ticker\",\n        value: ticker,\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        placeholder: \"Quantity\",\n        className: \"w3-input w3-border w3-light-grey\",\n        type: \"text\",\n        name: \"quantity\",\n        value: quantity,\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"w3-btn w3-round-large w3-blue-grey\",\n        placeholder: \"submit\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }\n      }, \"Buy\")))) : null)\n    );\n  }\n\n}\n\nexport default RightCol;","map":{"version":3,"sources":["/Users/dannylee/git/ttp-live/ttp-live-frontend/src/components/RightCol.js"],"names":["React","Component","axios","commaNumber","require","HEADERS","RightCol","constructor","props","handleChange","event","name","value","target","setState","handleSubmit","preventDefault","ticker","quantity","state","alert","Number","isInteger","get","then","response","data","symbol","orderCost","latestPrice","toFixed","newBalance","user","cash","placeOrder","id","errors","catch","error","console","log","userID","fetch","method","headers","body","JSON","stringify","toUpperCase","shares","price","user_id","resp","json","updateUser","getUserStocks","render","modeStatus","loading","userobj","parseFloat"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\n\n// facilitate comma-separated numbers, eg: 8,888\nvar commaNumber = require('comma-number')\n\nconst HEADERS = {\n  \"content-type\": \"application/json\",\n  \"accept\"      : \"application/json\"\n}\n\nclass RightCol extends Component {\n  constructor (props) {\n    super(props);\n    this.state = { \n      ticker: '',\n      quantity: ''\n    };\n  }\n\n  handleChange = (event) => {\n    const {name, value} = event.target\n    this.setState({\n      [name]: value\n    })\n  };\n\n  placeOrder(userID, newBalance, ticker, quantity, latestPrice) {\n    // create our new stock instance and assign it current user\n    fetch(`https://ttp-live-backend.herokuapp.com/stocks`, {\n      method: \"POST\",\n      headers: HEADERS,\n      body: JSON.stringify({\n        symbol: ticker.toUpperCase(),\n        shares: quantity,\n        price: latestPrice,\n        user_id: userID\n      })\n    })\n    .then(resp => resp.json())\n    .then(json => {\n      // update our current user's cash balance\n      fetch(`https://ttp-live-backend.herokuapp.com/users/${userID}`, {\n        method: \"PATCH\",\n        headers: HEADERS,\n        body: JSON.stringify({\n          cash: newBalance\n        })\n      })\n      .then(resp => resp.json())\n      .then(json => {\n        this.props.updateUser(json.user)\n      })\n      // update our stocks array in App.js state\n      // this.props.updateStocks(json.stock, latestPrice)\n      // instead get the stocks from the server API\n      this.props.getUserStocks(userID)\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    const {ticker, quantity} = this.state\n\n    // check for completed form inputs\n    if (!ticker) {\n      alert(\"Please enter a valid stock ticker symbol.\")\n      return\n    }\n    // positive, integers only\n    if (!quantity || !Number.isInteger(Number(quantity)) || quantity < 0) {\n      alert(\"Please enter quantity of shares\")\n      return\n    }\n\n    axios.get(`https://sandbox.iexapis.com/stable/stock/${ticker}/quote?token=Tpk_f60d00f3b3774527b14ddc2510d54b18`)\n    .then(response => {\n      if (response.data.symbol) {\n        let orderCost = (response.data.latestPrice * quantity).toFixed(2)\n        let newBalance = this.props.user.cash - orderCost\n\n        // make sure User has enough cash to cover purchase\n        if (newBalance > 0 ) {\n          // Had these two lines reversed, so state was getting reset before the order was sent out\n          this.placeOrder(this.props.user.id, newBalance, ticker, quantity, response.data.latestPrice)\n          this.setState({\n            ticker: '',\n            quantity: ''\n          })\n        } else {\n          alert(\"Insufficient funds\")\n          return\n        }\n      } else {\n        this.setState({\n          errors: 'no such ticker',\n          ticker: '',\n          quantity: ''\n        })\n      }\n    })\n    .catch(error => {\n      console.log('api errors:', error)\n      // clear state in the case we have an invalid ticker symbol\n      this.setState({\n        ticker: '',\n        quantity: ''\n      })\n      alert('Please enter a valid stock ticker symbol')\n    })\n  };\n\n  render() {\n    // console.log(this.props)\n    const {ticker, quantity} = this.state\n    return (\n      // Portfolio mode, show right column bg color and dividing line\n      <div className={`column ${(this.props.modeStatus === 'portfolio' && this.props.loading) ? 'right fade-out' \n        : this.props.modeStatus === 'portfolio' ? 'right' \n        : ''}`}>\n        {this.props.modeStatus === 'portfolio' ? \n        <>\n          <div className=\"cash-balance\">\n            Cash Balance: $ {this.props.userobj ? `${commaNumber(parseFloat(this.props.userobj.cash).toFixed(2))}` : null}\n          </div>\n          <br />\n          <div>\n            <form className=\"w3-container stock-form\" onSubmit={this.handleSubmit}>\n              <input\n                placeholder=\"Ticker symbol\"\n                className=\"w3-input w3-border w3-light-grey\"\n                type=\"text\"\n                name=\"ticker\"\n                value={ticker}\n                onChange={this.handleChange}\n              />\n              <br />\n              <input\n                  placeholder=\"Quantity\"\n                  className=\"w3-input w3-border w3-light-grey\"\n                  type=\"text\"\n                  name=\"quantity\"\n                  value={quantity}\n                  onChange={this.handleChange}\n              />\n              <br />\n              <button className=\"w3-btn w3-round-large w3-blue-grey\" placeholder=\"submit\" type=\"submit\">\n                Buy\n              </button>\n            </form>\n          </div>\n        </>\n        : null}\n      </div>\n    )\n  }\n}\n\nexport default RightCol;\n"]},"metadata":{},"sourceType":"module"}